// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.2.1
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Halfblood.AcceptanceTests.Features.PlanReceiptOrderDomain
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.2.1")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Обновление ППО (планового приходного ордера)")]
    public partial class ОбновлениеППОПлановогоПриходногоОрдераFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Update.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "Обновление ППО (планового приходного ордера)", "Хочу отредактировать ППО", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Редактирование ППО")]
        [NUnit.Framework.CategoryAttribute("позитивный")]
        [NUnit.Framework.TestCaseAttribute("1008309725", "287457664", "347089877", "777", "\'1.5.2013\'", "347089877", "888", "\'2.5.2013\'", "\'ОАО\"РАДИОДЕТАЛЬ\"\'", "\'какое-то примечание\'", null)]
        public virtual void РедактированиеППО(string rn, string склад, string тип, string номер, string дату, string тип_Для_Получения, string номер_Для_Получения, string дату_Для_Получения, string поставщик, string примечание, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "позитивный"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Редактирование ППО", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("Я хочу изменить существующий ППО", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 7
 testRunner.And(string.Format("я достаю из бд существующий ППО с RN = {0}", rn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 8
 testRunner.And(string.Format("изменяю склад {0}", склад), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 9
 testRunner.And(string.Format("изменяю тип {0} документа основания", тип), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 10
 testRunner.And(string.Format("изменяю № {0} документа основания", номер), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 11
 testRunner.And(string.Format("изменяю дату {0} документа основания", дату), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 12
 testRunner.And(string.Format("изменяю тип {0} документа основания для получения", тип_Для_Получения), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 13
 testRunner.And(string.Format("изменяю № {0} документа основания для получения", номер_Для_Получения), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 14
 testRunner.And(string.Format("изменяю дату {0} документа основания для получения", дату_Для_Получения), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 15
 testRunner.And(string.Format("изменяю поставщика {0}", поставщик), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 16
 testRunner.And(string.Format("изменяю примечание {0}", примечание), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 17
 testRunner.When("я нажимаю кнопку Обновить", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 18
 testRunner.Then("я вижу окно c сообщением - успешно обновлено", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
