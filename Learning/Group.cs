//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using NHibernate template.
// Code is generated on: 28.08.2013 16:01:00
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Collections.Generic;

namespace Learning
{

    /// <summary>
    /// There are no comments for Learning.Group, Learning in the schema.
    /// </summary>
    public partial class Group {
    
        #region Extensibility Method Definitions
        
        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();
        
        #endregion
        /// <summary>
        /// There are no comments for Group constructor in the schema.
        /// </summary>
        public Group()
        {
            this.Students = new List<Student>();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual int Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Students in the schema.
        /// </summary>
        public virtual IList<Student> Students
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Certificate in the schema.
        /// </summary>
        public virtual Certificate Certificate
        {
            get;
            set;
        }

        public override bool Equals(object obj)
        {
            if (obj is Group == false) return false;
            if (Object.ReferenceEquals(this, obj)) return true;

            if (Object.ReferenceEquals(this, null) || Object.ReferenceEquals(obj, null))
                return false;

            var value = obj as Group;

            return Id == value.Id;
        }
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }

}
